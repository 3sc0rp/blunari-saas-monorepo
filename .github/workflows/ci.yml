name: 🚀 Continuous Integration

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ============================================================================
  # QUALITY CHECKS
  # ============================================================================
  quality:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🔍 Type checking
        run: npm run type-check

      - name: 🧹 Lint checking
        run: npm run lint

      - name: 📊 Check for security vulnerabilities
        run: npm audit --audit-level=high

  # ============================================================================
  # BUILD VERIFICATION
  # ============================================================================
  build:
    name: 🏗️ Build Verification
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 15

    strategy:
      matrix:
        package: [
          "admin-dashboard",
          "client-dashboard", 
          "background-ops",
          "@blunari/types",
          "@blunari/utils",
          "@blunari/config"
        ]

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🏗️ Build package
        run: npm run build --workspace=${{ matrix.package }}
        env:
          NODE_ENV: production

      - name: 📤 Upload build artifacts
        if: matrix.package == 'admin-dashboard' || matrix.package == 'client-dashboard'
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.package }}
          path: apps/${{ matrix.package }}/dist
          retention-days: 7

  # ============================================================================
  # TESTING
  # ============================================================================
  test:
    name: 🧪 Testing
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 20

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: blunari_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🧪 Run unit tests
        run: npm run test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/blunari_test
          NODE_ENV: test

      - name: 📊 Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage
          path: coverage/
          retention-days: 7

  # ============================================================================
  # END-TO-END TESTING
  # ============================================================================
  e2e:
    name: 🎭 E2E Testing
    runs-on: ubuntu-latest
    needs: [build]
    timeout-minutes: 30
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 📋 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: 📥 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright
        working-directory: apps/client-dashboard
        run: npx playwright install --with-deps

      - name: 📤 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-client-dashboard
          path: apps/client-dashboard/dist

      - name: 🧪 Run Playwright tests
        working-directory: apps/client-dashboard
        run: npm run test
        env:
          CI: true

      - name: 📊 Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: apps/client-dashboard/playwright-report/
          retention-days: 7

  # ============================================================================
  # SECURITY SCANNING
  # ============================================================================
  security:
    name: 🛡️ Security Scan
    runs-on: ubuntu-latest
    needs: [quality]
    timeout-minutes: 10
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: 📦 Checkout repository
        uses: actions/checkout@v4

      - name: 🛡️ Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ============================================================================
  # STATUS CHECK
  # ============================================================================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality, build, test]
    if: always()

    steps:
      - name: ✅ Check CI status
        run: |
          if [[ "${{ needs.quality.result }}" == "success" && 
                "${{ needs.build.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" ]]; then
            echo "✅ All CI checks passed successfully!"
            exit 0
          else
            echo "❌ CI checks failed:"
            echo "  Quality: ${{ needs.quality.result }}"
            echo "  Build: ${{ needs.build.result }}"
            echo "  Test: ${{ needs.test.result }}"
            exit 1
          fi
