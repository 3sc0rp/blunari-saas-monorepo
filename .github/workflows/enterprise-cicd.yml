name: Enterprise CI/CD Pipeline
on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'
  
jobs:
  # Security and dependency analysis
  security-scan:
    name: Security & Dependency Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run security audit
        run: pnpm audit --audit-level moderate
        
      - name: Run dependency vulnerability scan
        uses: actions/dependency-review-action@v3
        if: github.event_name == 'pull_request'
        
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: typescript, javascript
          
      - name: Run CodeQL analysis
        uses: github/codeql-action/analyze@v2

  # Code quality and testing
  quality-assurance:
    name: Code Quality & Testing
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Type checking
        run: pnpm run type-check
        
      - name: Linting
        run: pnpm run lint
        
      - name: Format checking
        run: pnpm run format:check
        
      - name: Unit tests
        run: pnpm run test:unit --coverage
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
      - name: Integration tests
        run: pnpm run test:integration
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}

  # Performance and accessibility testing
  performance-testing:
    name: Performance & Accessibility
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build application
        run: pnpm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_TEST_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_TEST_ANON_KEY }}
          
      - name: Install Playwright
        run: pnpm exec playwright install chromium
        
      - name: Run Lighthouse CI
        run: |
          pnpm add -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
          
      - name: Run E2E tests
        run: pnpm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/

  # Build and bundle analysis
  build-analysis:
    name: Build & Bundle Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build for production
        run: pnpm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          
      - name: Analyze bundle size
        run: pnpm run analyze
        
      - name: Check bundle size limits
        run: |
          # Check if main bundle is under 1MB
          MAIN_SIZE=$(du -k dist/assets/index-*.js | cut -f1)
          if [ $MAIN_SIZE -gt 1024 ]; then
            echo "Main bundle is too large: ${MAIN_SIZE}KB"
            exit 1
          fi
          echo "Main bundle size: ${MAIN_SIZE}KB âœ“"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            bundle-analyzer-report.html

  # Deployment to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [security-scan, quality-assurance, performance-testing, build-analysis]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build for staging
        run: pnpm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_STAGING_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_STAGING_ANON_KEY }}
          VITE_ENVIRONMENT: staging
          
      - name: Deploy to Vercel Staging
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Run smoke tests on staging
        run: pnpm run test:smoke
        env:
          TEST_BASE_URL: https://staging-blunari.vercel.app

  # Deployment to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build for production
        run: pnpm run build
        env:
          VITE_SUPABASE_URL: ${{ secrets.SUPABASE_PROD_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_PROD_ANON_KEY }}
          VITE_ENVIRONMENT: production
          
      - name: Deploy to Vercel Production
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./
          scope: ${{ secrets.VERCEL_ORG_ID }}
          
      - name: Run production health checks
        run: |
          # Wait for deployment to be ready
          sleep 30
          
          # Check main endpoints
          curl -f https://demo.blunari.ai/health || exit 1
          curl -f https://demo.blunari.ai/api/status || exit 1
          
          echo "Production deployment health check passed âœ“"
          
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            Automated release from commit ${{ github.sha }}
            
            ## Changes
            - Auto-generated release from CI/CD pipeline
            
            ## Deployment
            - âœ… Staging: https://staging-blunari.vercel.app
            - âœ… Production: https://demo.blunari.ai
          draft: false
          prerelease: false

  # Monitoring and alerting
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Setup monitoring
        run: |
          # Send deployment notification to Slack/Discord
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"ðŸš€ Blunari SAAS deployed to production successfully!"}' \
            ${{ secrets.SLACK_WEBHOOK_URL }}
            
      - name: Run synthetic monitoring
        run: |
          # Run basic synthetic tests to ensure production is working
          for i in {1..5}; do
            echo "Health check attempt $i"
            if curl -f https://demo.blunari.ai/health; then
              echo "Health check passed âœ“"
              break
            else
              echo "Health check failed, retrying..."
              sleep 10
            fi
          done

# Additional workflow configurations
